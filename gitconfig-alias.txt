[alias]

  # For help on git aliases and credit for these here, see these resources:
  # https://git.wiki.kernel.org/index.php/Aliases
  # http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain
  # http://superuser.com/questions/169695/what-are-your-favorite-git-aliases
  # http://stackoverflow.com/questions/1309430/how-to-embed-bash-script-directly-inside-a-git-alias
  # http://code.joejag.com/2013/everyday-git-aliases/
  # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  # https://ochronus.com/git-tips-from-the-trenches/
  # http://mislav.uniqpath.com/2010/07/git-tips/

  ##
  # One-letter aliases
  ##

  # add - record file contents to the index.
  a = add

  # branch - list, create, or delete branches.
  b = branch

  # commit - record changes to the repostiory with a message.
  c = commit -m

  # diff - show changes between commits, commit and working tree, etc.
  d = diff

  # edit - pipe the diff output to your editor of choice.
  e = !git diff | $EDITOR

  # fetch - download objects and refs from another repository.
  f = fetch

  # grep - print lines matching a pattern.
  g = grep

  # log - show commit logs.
  l = log

  # merge - join two or more development histories together.
  m = merge

  # checkout - update the working tree to match a branch or paths; we use "o" to mean "out".
  o = checkout

  # pull - fetch from and merge with another repository or a local branch.
  p = pull

  # remote - manage set of tracked repositories.
  r = remote

  # status - show the working tree differences
  s = status -sb

  # whatchanged - show logs with the differences introduced by each commit.
  w = whatchanged

  ##
  # Simple fairly-frequent aliases.
  # Some of these duplicate the aliases above,
  # which is intentional because this lets our
  # developers use whichever alias they prefer.
  ##

  # add just the files in the local directory that are updated
  au = add --update .

  # add and commit - goes into each change, and asks if we want to put it in the repo.
  ac = !git add -p; git commit

  # add by patches - goes into each change, and asks if we want to put it in the repo.
  ap = add -p

  # branch - list, create, or delete branches [same as "b"]
  br = branch

  # branch and only list branches whose tips are reachable from the specified commit (HEAD if not specified).
  brm = branch --merged

  # branch and only list branches whose tips are not reachable from the specified commit (HEAD if not specified).
  brnm = branch --no-merged

  # branches listed in reverse-chronological modification time
  brs = for-each-ref --sort=-committerdate --format="%(committerdate:relative)%09%(refname:short)" refs/heads

  # commit - amend the tip of the current branch rather than creating a new commit.
  ca = commit --amend

  # commit with --verbose and with the given <msg> as the commit message.
  ci = commit -v -m

  # checkout - update the working tree to match a branch or paths. [same as "o" for "out"]
  co = checkout

  # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
  cp = cherry-pick

  # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
  cp-nx = cherry-pick --no-commit -x

  # diff - show changes not yet staged
  dc = diff --cached

  # diff - show changes between commits, commit and working tree, etc. [same as "d"]
  di = diff

  # diff - changes about to be commited
  ds = diff --staged

  # diff - show changes but by word, not line
  dw = diff --word-diff

  # log with a text-based graphical representation of the commit history.
  lg = log --graph

  # log with patch generation.
  lp = log --patch

  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.
  lt = log --topo-order

  # log line summary: "YYYY-MM-DD <hash> <abbrev-commit>"
  ll = log --pretty=format:'%ad %h %s' --abbrev-commit --date=short

  # log line longer summary: a graph, colors, one-line commit messages, and iso dates.
  lll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=iso

  # ls-files - show information about files in the index and the working tree; like Unix "ls" command.
  ls = ls-files

  # ls-ignored -  list files that git has ignored.
  ls-ignored = ls-files --others --i --exclude-standard

  # merge but without autocommit, and with a commit even if the merge resolved as a fast-forward.
  me = merge --no-commit --no-ff

  # pull with rebase - to provide a cleaner, linear, bisectable history.
  #
  # To integrate changes between branches, you can merge or rebase.
  #
  # When we use "git pull", git does a fetch then a merge.
  # If we’ve made changes locally and someone else has pushed changes
  # to our git host then git will automatically merge these together
  # and create a merge commit that looks like this in the history:
  #
  #    12345678 - Merge branch 'foo' of bar into master
  #
  # When we use "git pull ––rebase", git does a fetch then a rebase.
  # A rebase resets the HEAD of your local branch to be the same as
  # the remote HEAD, then replays your local commits back into repo.
  # This means you don’t get any noisy merge messages in your history.
  # This gives us a linear history, and also helps with git bisect.
  #
  # To automatically do "pull --rebase" for any branch based on master:
  #
  #    git config branch.master.rebase true
  #
  # To automatically do "pull --rebase" for all branches:
  #
  #     git config --global branch.autosetuprebase always
  #
  pr = pull --rebase

  # rebase - forward-port local commits to the updated upstream head.
  rb = rebase

  # rebase - continue the rebasing process after resolving a conflict manually and updating the index with the resolution.
  rbc = rebase --continue

  # rebase - restart the rebasing process by skipping the current patch.
  rbs = rebase --skip

  # rbi - rebase interactive on our unpushed commits.
  #
  # Before we push our local changes, we may want to do some cleanup,
  # to improve our commit messages or squash related commits together.
  #
  # Let’s say I’ve pushed two commits that are related to a new feature and
  # I have another where I made a spelling mistake in the commit message.
  # When I run "git rbi" I get dropped into my editor with this:
  #
  #     pick 7f06d36 foo
  #     pick ad544d0 goo
  #     pick de3083a hoo
  #
  # Let's say I want to squash the "foo" and "goo" commits together,
  # and also change "hoo" to say "whatever". To do these, I change "pick"
  # to say "s" for squash; this tells git to squash the two together;
  # I also edit "hoo". I make the file look like:
  #
  #     pick 7f06d36 foo
  #     s ad544d0 goo
  #     r de3083a whatever
  # This gives me two new commit messages to edit, which I update.
  # Now when I push the remote repo host receives two commits
  #
  #     3400455 - foo
  #     5dae0a0 - whatever
  #
  rbi = !git rebase -i @{u}

  # reflog - reference log that manages when tips of branches are updated.
  rl = reflog

  # remote - manage set of tracked repositories [same as "r"].
  rr = remote

  # remote show - gives some information about the remote <name>.
  rrs = remote show

  # remote update - fetch updates for a named set of remotes in the repository as defined by remotes.
  rru = remote update

  # remote prune - deletes all stale remote-tracking branches under <name>.
  rrp = remote prune

  # revert - undo the changes from some existing commits
  rv = revert

  # revert without autocommit; useful when you're reverting more than one commits' effect to your index in a row.
  rvnc = revert --no-commit

  # show-branch - print a list of branches and their commits.
  sb = show-branch

  # submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.
  sm = submodule

  # submodule with initialize, update, and recursive; this is useful to bring a submodule fully up to date.
  smu = submodule update --init --recursive

  # status - show the working tree differences [same as "s"]
  st = status


  ### INSPECTION ALIASES ###

  # Show our defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # Show our tags
  tags = tag -n1 -l

  # Diffs
  diff-all = '!for name in $(git diff --name-only $1); do git difftool $1 $name & done'
  diff-changes = diff --name-status -r
  diff-stat = diff --stat -b -r
  diff-staged = diff --cached

  # From https://gist.github.com/492227
  head = !"git log -n1"
  heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"
  lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

  # Find text in any commit ever
  grep-all = !"git rev-list --all | xargs git grep '$1'"

  # Sort by date for branches; can be useful for spring cleaning
  refs-by-date = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

  # Find all objects that aren't referenced by any other object (orphans).
  # To help an orphan, we create a new branch with the orphan's commit hash,
  # then merge it into our current branch:
  #
  #    git branch foo <commit>
  #    git merge foo
  #
  orphans = fsck --full


  ### LOG ALIASES ###

  log-graph = log --all --graph --decorate
  log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
  log-timeline = log --format='%h %an %ar - %s'
  log-local = log --oneline origin..HEAD
  log-fetched = log --oneline HEAD..origin/master

  # Show log of changes, most recent first
  log-changes = log --oneline --reverse

  # Show log of new commits after you fetched, with stats, excluding merges
  log-commits = log ORIG_HEAD.. --stat --no-merges

  # Show log with dates in our local timezone
  log-local = log --date=local

  # Show the log for my own user email
  log-me = !git log --author `git config user.email`

  # Show log as a graph
  log-graph = log --graph --oneline --decorate

  # Show the date of the first commit
  log-first-date = !"git log --date-order --date=iso --pretty=%ad --reverse | head -1"

  # Show the recent day
  log-day = log --since yesterday

  # Show the recent day for your own user, suitable for a daily standup meeting.
  log-standup = !git log --since yesterday --author `git config user.email` --pretty=short


  ### LOOKUP ALIASES ###

  # whois: given a string for an author, try to figure out full name and email:
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

  # Given any git object, try to show it briefly
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

  # Show who contributed with summarized changes
  who = shortlog -s --

  # Show who contributed, in descending order by number of commits
  whorank = shortlog -sn --no-merges


  ### WORKFLOW ALIASES ###

  # Stash aliases
  save = !git stash save
  pop = !git stash pop

  # Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  # Take a snapshot of your current working tree without removing changes.
  # This is handy for refactoring where you can’t quite fit what you’ve done
  # into a commit but daren’t stray too far from now without a backup.
  #
  # Running this:
  #
  #    $ git snapshot
  #
  # Creates this stash:
  #
  #    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
  #
  # And seemingly no changes to your working tree.
  #
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

  # When you're a little worried that the world is coming to an end
  panic = !tar cvf ../git_panic.tar *

  # Do everything we can to synchronize all changes
  get = !git pull --rebase && git submodule update --init --recursive
  put = !git commit -am "$1" && git push

  # Undo aliases
  undo = !git reset --hard
  undoclean = !git reset --hard && git clean -fd
  uncommit = !git reset --soft HEAD^
  unadd = !git reset HEAD
  unstage = !git reset HEAD

  # Reset aliases, akin to undo alias above
  reset-hard = !git reset --hard
  reset-hard-clean = !git reset --hard && git clean -fd
  reset-commit = !git reset --soft HEAD^
  reset-add = !git reset HEAD
  reset-stage = !git reset HEAD

  # Editing and adding conflicted files: when we get many merge conflicts
  # and want to quickly solve them using an editor, then add the  files.
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

  # Ours & Theirs - easy merging when you know which files you want
  #
  # Sometimes during a merge you want to take a file from one side wholesale.
  # The following aliases expose the ours and theirs commands which let you
  # pick a file(s) from the current branch or the merged branch respectively.
  #
  # N.b. the function is there as hack to get $@ doing
  # what you would expect it to as a shell user.
  #
  ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  # Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
  # This enables a quick way to add all new and modified files to the index,
  # while cleaning the index from the files removed from the working tree;
  # this cleaning will facilite a rebase, because there won't be any conlfict
  # due to an "unclean" working directory (not in sync with the index).
  # The unwip will restore the deleted files to the working tree.
  wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
  unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

  # Assume: from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  # Sometimes we want to change a file in a repo, but never check in your edits.
  # We can't use .gitignore because the file is tracked. We use update-index.
  #
  # Suppose we want to edit passwords.txt and for god's sake never check it in:
  #
  #     $ git status
  #     modified passwords.txt
  #     modified foo.txt
  #
  #     $ git assume passwords.txt
  #     $ git status
  #     modified foo.txt
  #
  #     $ git assumed
  #     passwords.txt
  #
  #     $ git unassume passwords.txt
  #     $ git status
  #     modified passwords.txt
  #     modified foo.txt
  #
  assume   = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

  # Delete all branches that have already been merged into master.
  master-cleanse = !"git checkout master && git branch --merged | xargs git branch -d"


  ### SVN ALIASES ###

  # For SVN-compatible versions of commands, we use "foo-svn" instead
  # of "svn-foo" so that it's suggested when we tab-complete "git fo..."
  cherry-pick-svn = !GIT_EDITOR='sed -i /^git-svn-id:/d' git cherry-pick -e
  branch-svn = svn branch
  merge-svn = merge --squash
  push-svn = svn dcommit


  ### CVS ALIASES ###

  cvsi = !git cvsimport -k -a
  cvse = cvsexportcommit -u -p
  cvseh = cvsexportcommit -u -p -c HEAD


  ### GITK ALIASES ###

  # show conflicting merge in gitk:
  gitk-conflict = !gitk --left-right HEAD...MERGE_HEAD

  # show full history in gitk (including "deleted" branches and stashes)
  gitk-history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )


  ### ADVANCED ALIASES ###

  # Search for a given string in all patches and print commit messages.
  # Posted by Mikko Rantalainen on StackOverflow.
  #
  # Example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  #
  # Example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  #
  # Example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

  # A 'debug' alias to help debugging builtins: when debugging builtins,
  # we use gdb to analyze the runtime state. However, we have to disable
  # the pager, and often we have to call the program with arguments.
  # If the program to debug is a builtin, we use this alias.
  debug = !GIT_PAGER= gdb --args git

  # Getting the diff of only one function: when we want to see just the
  # differences of one function in one file in two different commits,
  # we create two temp files which contain only the function, then diff.
  # Use this alias this way: git funcdiff <old-rev> <new-rev> <path> <function>
  # diff-func = !sh -c "git show \"\$1:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp1 && git show \"\$2:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp2 && git diff --no-index .tmp1 .tmp2" -

  # Calling "interdiff" between commits: if upstream applied a
  # slightly modified patch, and we want to see the modifications,
  # we use the program interdiff of the patchutils package.
  intercommit = !sh -c 'git show "$1" > .git/commit1 && git show "$2" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -

  # Prune all your stale remote branches: there's no way to tell
  # git remote update to prune stale branches, and git remote prune
  # does not understand --all. So here is a shell command to do it.
  prune-all = !git remote | xargs -n 1 git remote prune

  # Publish is from Justin French
  publish = !git checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf

  # Thanks to cody cutrer
  cherry-pick-merge = "!bash -c 'git cherry-pick -n -m 1 $0 && \
    git log -1 --pretty=%P $0 | cut -b 42- > .git/MERGE_HEAD && \
    git commit -v'"

  # Thanks to jtolds on stackoverflow
  remote-ref = "!bash -c ' \
    local_ref=$(git symbolic-ref HEAD); \
    local_name=${local_ref##refs/heads/}; \
    remote=$(git config branch.\"#local_name\".remote || echo origin); \
    remote_ref=$(git config branch.\"$local_name\".merge); \
    remote_name=${remote_ref##refs/heads/}; \
    echo remotes/$remote/$remote_name'"

  # Thanks to jtolds on stackoverflow
  rebase-recent = !git rebase -i $(git remote-ref)

  # Use graphviz for display.
  # This produces output that can be displayed using dotty, for example:
  #   $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
  #   $ git graphviz --first-parent master | dotty /dev/stdin
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

